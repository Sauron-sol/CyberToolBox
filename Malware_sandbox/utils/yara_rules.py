import yara
from pathlib import Path
import logging

class YaraRules:
    def __init__(self):
        self.rules = None
        self._load_rules()
    
    def _load_rules(self):
        """Load YARA rules from rules directory"""
        rules_dir = Path(__file__).parent / "yara_rules"
        
        # Create directory if it doesn't exist
        rules_dir.mkdir(parents=True, exist_ok=True)
        
        # Create test rule if none exists
        if not list(rules_dir.glob("*.yar")):
            test_rule = rules_dir / "test.yar"
            test_rule.write_text("""
rule test_rule {
    meta:
        description = "Test rule"
    strings:
        $a = "test"
    condition:
        any of them
}
""")
        
        # Rule compilation
        rules_dict = {}
        for rule_file in rules_dir.glob("*.yar"):
            try:
                rules_dict[rule_file.stem] = str(rule_file)
            except Exception as e:
                logging.error(f"Error loading {rule_file}: {e}")
        
        if rules_dict:
            self.rules = yara.compile(filepaths=rules_dict)
        else:
            logging.warning("No YARA rules found")
            # Create empty rule to avoid errors
            self.rules = yara.compile(source='rule dummy { condition: false }')
    
    def scan(self, file_path):
        """File analyse with YARA rules"""
        if not self.rules:
            return []
            
        try:
            matches = self.rules.match(file_path)
            return [
                {
                    "rule": match.rule,
                    "tags": match.tags,
                    "meta": match.meta,
                    "strings": match.strings
                }
                for match in matches
            ]
        except Exception as e:
            logging.error(f"Error during YARA scan: {e}")
            return []
