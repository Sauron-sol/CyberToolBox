from dataclasses import dataclass
from typing import List, Dict

@dataclass
class MalwareSignature:
    name: str
    description: str
    severity: str
    indicators: List[str]
    mitre_techniques: List[str]

class SignatureDatabase:
    def __init__(self):
        self.signatures: Dict[str, MalwareSignature] = {}
        self._load_signatures()
    
    def _load_signatures(self):
        """Load signatures from database"""
        # Example signatures
        self.signatures["process_injection"] = MalwareSignature(
            name="Process Injection",
            description="Process injection detection",
            severity="high",
            indicators=[
                "CreateRemoteThread",
                "VirtualAllocEx",
                "WriteProcessMemory"
            ],
            mitre_techniques=["T1055"]
        )
        
    def match_behavior(self, behaviors: List[str]) -> List[MalwareSignature]:
        """Vérifie si les comportements correspondent à des signatures connues"""
        matches = []
        for sig in self.signatures.values():
            if any(indicator in behaviors for indicator in sig.indicators):
                matches.append(sig)
        return matches
