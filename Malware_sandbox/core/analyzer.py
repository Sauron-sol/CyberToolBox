from time import sleep
from ratelimit import limits, sleep_and_retry
from utils.yara_rules import YaraRules
from utils.signatures import SignatureDatabase
from utils.virustotal import VirusTotalAPI
from core.virtualizer import SandboxEnvironment
import logging
import asyncio
import uuid
from pathlib import Path
import magic
import hashlib
import string
import re
from core.monitor import SystemMonitor
from datetime import datetime

class MalwareAnalyzer:
    def __init__(self):
        self.yara_rules = YaraRules()
        self.signatures = SignatureDatabase()
        self.vtapi = VirusTotalAPI()
        self.magic = magic.Magic(mime=True)
        self.virtualizer = SandboxEnvironment()
        self.monitor = SystemMonitor()
        
    async def analyze_sample(self, file_path):
        """Complete analysis of a sample with details"""
        try:
            static_results = await self.static_analysis(file_path)
            
            # Determine appropriate analysis environment
            if static_results['file_type'].startswith('application/x-dosexec'):
                vm_type = 'windows'
            elif static_results['file_type'].startswith('application/x-executable'):
                vm_type = 'linux'
            else:
                vm_type = 'unknown'
                
            results = {
                'static_analysis': static_results,
                'dynamic_analysis': await self.dynamic_analysis(file_path, vm_type),
                'network_analysis': await self.network_analysis(),
                'memory_analysis': await self.memory_analysis(),
                'environment': {
                    'vm_type': vm_type,
                    'analysis_time': datetime.now().isoformat(),
                    'sandbox_version': '1.0.0'
                }
            }
            return results
        except Exception as e:
            logging.error(f"Error during analysis: {e}")
            return {}

    async def static_analysis(self, file_path):
        """Analyse statique du fichier"""
        return {
            'file_type': self.get_file_type(file_path),
            'hashes': self.calculate_hashes(file_path),
            'strings': self.extract_strings(file_path),
            'yara_matches': self.yara_rules.scan(file_path),
            'vt_results': await self.vtapi.scan_file(file_path)
        }

    @sleep_and_retry
    @limits(calls=4, period=60)  # Limite VirusTotal: 4 requêtes/minute
    async def check_virustotal(self, file_hash):
        """Vérifie un hash sur VirusTotal avec rate limiting"""
        try:
            return await self.vtapi.get_file_report(file_hash)
        except Exception as e:
            logging.error(f"Erreur VirusTotal: {e}")
            return None

    async def dynamic_analysis(self, file_path, vm_type=None):
        """Simplified version for testing"""
        try:
            vm = self.virtualizer.create_analysis_vm()
            print(f"[TEST] Dynamic analysis of {file_path} (VM: {vm_type})")
            return {
                'processes': ['test_process'],
                'network_activity': [],
                'file_operations': [{'path': file_path, 'operation': 'read'}],
                'registry_changes': []
            }
        except Exception as e:
            logging.error(f"Error during dynamic analysis: {e}")
            return {
                'processes': [],
                'network_activity': [],
                'file_operations': [],
                'registry_changes': []
            }

    async def network_analysis(self):
        """Version simplifiée de l'analyse réseau pour les tests"""
        return {
            'connections': [],
            'dns_requests': [],
            'http_requests': [],
            'suspicious_traffic': []
        }

    async def memory_analysis(self):
        """Version simplifiée de l'analyse mémoire"""
        return {
            'processes': [],
            'network_connections': [],
            'injected_code': [],
            'hidden_processes': []
        }

    def get_file_type(self, file_path):
        """Determines file type"""
        try:
            return self.magic.from_file(file_path)
        except Exception as e:
            logging.error(f"Error detecting file type: {e}")
            return "unknown"

    def calculate_hashes(self, file_path):
        """Calculates various file hashes"""
        try:
            with open(file_path, 'rb') as f:
                content = f.read()
                return {
                    'md5': hashlib.md5(content).hexdigest(),
                    'sha1': hashlib.sha1(content).hexdigest(),
                    'sha256': hashlib.sha256(content).hexdigest()
                }
        except Exception as e:
            logging.error(f"Error calculating hashes: {e}")
            return {}

    def extract_strings(self, file_path, min_length=4):
        """Extracts strings from file"""
        try:
            strings = []
            with open(file_path, 'rb') as f:
                content = f.read()
                
            # ASCII strings
            ascii_strings = re.findall(b'[%s]{%d,}' % (
                string.printable.encode('ascii'),
                min_length
            ), content)
            
            # Unicode strings
            unicode_strings = re.findall(b'(?:[\x20-\x7E][\x00]){%d,}' % min_length, content)
            
            return {
                'ascii': [s.decode('ascii') for s in ascii_strings],
                'unicode': [s.decode('utf-16le') for s in unicode_strings]
            }
        except Exception as e:
            logging.error(f"Error extracting strings: {e}")
            return {'ascii': [], 'unicode': []}
