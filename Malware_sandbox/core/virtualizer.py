import platform
import uuid
import logging
from abc import ABC, abstractmethod

class VirtualMachine(ABC):
    @abstractmethod
    def start(self): pass
    
    @abstractmethod
    def stop(self): pass
    
    @abstractmethod
    def restore_snapshot(self): pass
    
    @abstractmethod
    def copy_file(self, file_path): pass
    
    @abstractmethod
    def execute_file(self, file_path): pass

class WindowsVM(VirtualMachine):
    def __init__(self, name):
        self.name = name
        self.platform = "windows"
        
    def start(self):
        logging.info(f"[Windows VM] Starting {self.name}")
        
    def stop(self):
        logging.info(f"[Windows VM] Stopping {self.name}")
        
    def restore_snapshot(self):
        logging.info(f"[Windows VM] Restoring snapshot of {self.name}")
        
    def copy_file(self, file_path):
        logging.info(f"[Windows VM] Copying {file_path}")
        
    def execute_file(self, file_path):
        logging.info(f"[Windows VM] Executing {file_path}")

class LinuxVM(VirtualMachine):
    def __init__(self, name):
        self.name = name
        self.platform = "linux"
        
    def start(self):
        logging.info(f"[Linux VM] Starting {self.name}")
        
    def stop(self):
        logging.info(f"[Linux VM] Stopping {self.name}")
        
    def restore_snapshot(self):
        logging.info(f"[Linux VM] Restoring snapshot of {self.name}")
        
    def copy_file(self, file_path):
        logging.info(f"[Linux VM] Copying {file_path}")
        
    def execute_file(self, file_path):
        logging.info(f"[Linux VM] Executing {file_path}")

class MacVM(VirtualMachine):
    def __init__(self, name):
        self.name = name
        self.platform = "macos"
        
    def start(self):
        logging.info(f"[MacOS VM] Starting {self.name}")
        
    def stop(self):
        logging.info(f"[MacOS VM] Stopping {self.name}")
        
    def restore_snapshot(self):
        logging.info(f"[MacOS VM] Restoring snapshot of {self.name}")
        
    def copy_file(self, file_path):
        logging.info(f"[MacOS VM] Copying {file_path}")
        
    def execute_file(self, file_path):
        logging.info(f"[MacOS VM] Executing {file_path}")

class SandboxEnvironment:
    def __init__(self):
        self.os_type = platform.system()
        
    def create_analysis_vm(self):
        """Creates an analysis VM based on file type and OS"""
        vm_name = f"sandbox_{uuid.uuid4()}"
        
        if self.os_type == "Windows":
            return WindowsVM(vm_name)
        elif self.os_type == "Linux":
            return LinuxVM(vm_name)
        else:  # Darwin (MacOS)
            return MacVM(vm_name)
