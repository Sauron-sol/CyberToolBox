import asyncio
import logging
import sys
from pathlib import Path
from fastapi import FastAPI
from config.logging_config import setup_logging
from config.sandbox_config import SandboxConfig
from api.routes import router as api_router
from core.analyzer import MalwareAnalyzer
from core.reporter import SandboxReporter

def init_directories():
    """Initialize required directories"""
    dirs = [
        SandboxConfig.SAMPLES_DIR,
        SandboxConfig.REPORTS_DIR
    ]
    for dir_path in dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)

async def analyze_file(file_path):
    """Analyze a single file"""
    try:
        analyzer = MalwareAnalyzer()
        reporter = SandboxReporter(SandboxConfig)
        
        results = await analyzer.analyze_sample(file_path)
        
        sample_info = {
            'filename': Path(file_path).name,
            'size': Path(file_path).stat().st_size,
            'path': file_path
        }
        
        report = await reporter.generate_report(results, sample_info)
        print(f"\n✅ Analysis complete!")
        print(f"Risk score: {report['risk_score']}/100")
        print(f"Reports saved to:")
        print(f"- HTML: {report['html_path']}")
        print(f"- JSON: {report['json_path']}")
        
    except Exception as e:
        print(f"❌ Error during analysis: {e}")
        logging.error(f"Analysis error: {e}", exc_info=True)

# Create FastAPI application
app = FastAPI(title="Malware Analysis Sandbox")
app.include_router(api_router, prefix="/api")

@app.on_event("startup")
async def startup_event():
    setup_logging()
    init_directories()

def main():
    if len(sys.argv) > 1 and sys.argv[1] == "analyze":
        if len(sys.argv) != 3:
            print("Usage: python main.py analyze <file_path>")
            sys.exit(1)
        file_path = sys.argv[2]
        asyncio.run(analyze_file(file_path))

if __name__ == "__main__":
    main() 