import asyncio
import logging
import platform
from pathlib import Path
from core.analyzer import MalwareAnalyzer
from core.reporter import SandboxReporter
from config.sandbox_config import SandboxConfig

async def test_basic_analysis():
    """Basic test with a legitimate file"""
    try:
        # Select test file based on OS
        if platform.system() == "Darwin":  # MacOS
            test_file = "/bin/ls"  # Using ls command as example
        else:
            test_file = "C:\\Windows\\System32\\notepad.exe"
        
        print(f"üîç Testing with file: {test_file}")
        
        # File existence check
        if not Path(test_file).exists():
            raise FileNotFoundError(f"Test file {test_file} does not exist")
        
        # Initialisation
        analyzer = MalwareAnalyzer()
        reporter = SandboxReporter(SandboxConfig)
        
        print("üöÄ Starting analysis...")
        
        # Analyse du fichier
        results = await analyzer.analyze_sample(test_file)
        
        # File information
        sample_info = {
            'filename': Path(test_file).name,
            'size': Path(test_file).stat().st_size,
            'path': test_file
        }
        
        # Generate report
        report = await reporter.generate_report(results, sample_info)
        
        print("\n‚úÖ Analysis complete!")
        print("\nResults:")
        print(f"Risk score: {report['risk_score']}/100")
        print(f"JSON Report: {report['json_path']}")
        print(f"HTML Report: {report['html_path']}")
        
    except Exception as e:
        print(f"‚ùå Error during the test: {e}")
        logging.error(f"Test error: {e}", exc_info=True)

if __name__ == "__main__":
    print("üîç Test of Malware Analysis Sandbox")
    asyncio.run(test_basic_analysis()) 